#!@SHELL@
# -*- shell-script -*-

set -eu
#set -x

# trace
trace() { echo "mirror:DEBUG: $*" >&2; }
message() { echo "mirror:INFO: $*" >&2; }
error() { echo "mirror:ERROR: $*" >&2; exit 1; }
die() { echo "mirror:FATAL: $*" >&2; exit 1; }

trace "MIRROR: $0 $@"

# check_stampfile
# (success if update is needed)
check_stampfile()
{
	# no stampfile given: always run
	test x"$STAMPFILE" != x || {
		trace "no stampfile file given, sync forced";
		return 0; }
	# stampfile does not exist yet: run
	test -e "$STAMPFILE" || {
		trace "stampfile not found, sync force";
		return 0; }
	# read it
	LAST_DATE="`cat $STAMPFILE`"
	LAST_STAMP="`date -d \"$LAST_DATE\" '+%s'`"
	trace "stamps (old/new) : $LAST_DATE/$START_DATE ($LAST_STAMP/$START_STAMP)"
	if [ $LAST_STAMP -gt $START_STAMP ]; then
		error "last stamp is in the future! ($LAST_DATE > $START_DATE)"
		# [FIXME] what to do now ?
		return 1
	elif [ $((START_STAMP - LAST_STAMP)) -ge $((DELAY * 86400)) ]; then
		trace "mirror needs update"
		return 0
	else
		trace "mirror is up to date"
		return 1
	fi
}

# process_main
process_main()
{
	START_DATE="`date '+%Y-%m-%d'`"
	START_STAMP="`date -d \"$START_DATE\" '+%s'`"
	# check the stampfile
	check_stampfile || return 0
	# check files
	L="$CHECK_FILES"
	while test x"$L" != x; do
		F="`echo $L | cut -d: -f1`"
		L="`echo $L | cut -sd: -f2-`"
		test x"$F" != x || continue
		test -e "$F" \
			&& trace "checkfile found: \`$F'" \
			|| die "checkfile not found: \`$F'"
	done
	# ok, create the dest
	test -d "$DEST" || mkdir -vp "$DEST"
	#
	RSYNC="`which rsync`" && test -x "$RSYNC" || die "rsync not found ($RSYNC)"
	CMD="$RSYNC -a --delete --delete-excluded --numeric-ids --no-specials --one-file-system"
	L="$EXCLUDE_FILES"
	while test x"$L" != x; do
		F="`echo $L | cut -d: -f1`"
		L="`echo $L | cut -sd: -f2-`"
		test x"$F" = x || CMD="${CMD} --exclude-from=\"$F\""
	done
	CMD="${CMD} \"$SOURCE/\" \"$DEST\""
	# run
	N=1
	while true; do
		R=0
		trace "[$N/$NTRIES] `pwd`> $CMD"
		eval "$CMD" || R=$?
		case $R in
			0) trace "rsync: success"; break;;
			*) error "rsync: failed ($R)";;
		esac
		if test $N -ge $NTRIES; then
			die "rsync failed $N times, giving up"
		fi
		N=$((N+1))
	done
	# update stampfile
	trace "updating stampfile: \`$STAMPFILE'"
	test x"$STAMPFILE" = x || {
		echo "$START_STAMP" >"$STAMPFILE.tmp" \
			&& mv -f "$STAMPFILE.tmp" "$STAMPFILE"; }
}

# defaults
EXCLUDE_FILES=
CHECK_FILES=
NTRIES=3
STAMPFILE=
DELAY=1
# parse command line
GTO='getopt -s sh -n mirror -o "n:x:c:s:d:h" -- "${@}"' \
	|| die "getopt failed"
eval set -- "`eval $GTO`"
while true; do
	case "$1" in
		-h) usage; exit 0;;
		-n) NTRIES="$2"; shift 2;;
		-x) EXCLUDE_FILES="${EXCLUDE_FILES}:${2}"; shift 2;;
		-c) CHECK_FILES="${CHECK_FILES}:${2}"; shift 2;;
		-s) STAMPFILE="$2"; shift 2;;
		-d) DELAY="$2"; shift 2;;
		--) shift; break;;
		*) die "oups: arg $1"
	esac
done
# arguments
test $# -eq 2 || die "wrong args number: $@"
SOURCE="$1"
DEST="$2"
# go
R=0; process_main || RMAIN=?
sync
# report
test $RMAIN -eq 0 \
	&& trace "all done!" \
	|| error "failed!"
exit $RMAIN
