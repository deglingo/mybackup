#!@SHELL@
# -*- shell-script -*-

set -eu
#set -x

# trace
trace() { echo "mirror:DEBUG: $*" >&2; }
message() { echo "mirror:INFO: $*" >&2; }
error() { echo "mirror:ERROR: $*" >&2; exit 1; }
die() { echo "mirror:FATAL: $*" >&2; exit 1; }

info "MIRROR: $0 $@"

# _ismounted DIR
_ismounted()
{
	local dir="`readlink -e $1`" && test -d "$dir" \
		|| die "_ismounted: invalid dir: '$1'"
	local dir2
	for dir2 in `awk '{print $2}' /etc/mtab`; do
		dir2="`readlink -e $dir2`" && test -d "$dir2" \
			|| continue
		test x"$dir" != x"$dir2" || return 0
	done
	return 1
}

# process_mount
process_mount()
{
	# 1. unmount RWMOUNT (weird things can happen if ROMOUNT is
	# unmounted while RWMOUNT is still up)
	if _ismounted "$RWMOUNT"; then
		message "umount '$RWMOUNT'"
		umount "$RWMOUNT" || {
			error "could not unmount '$RWMOUNT', trying lazy mode";
			umount -l "$RWMOUNT" || {
				error "could not unmount '$RWMOUNT'";
				return 1; }; }
	fi
	# 2. mount ROMOUNT if needed
	if ! _ismounted "$ROMOUNT"; then
		message "mount '$ROMOUNT'"
		mount "$ROMOUNT" || {
			error "could not mount '$ROMOUNT'";
			return 1; }
	fi
	# 3. bind RWMOUNT and make it writable
	message "mount --bind '$ROMOUNT' '$RWMOUNT'"
	mount --bind "$ROMOUNT" "$RWMOUNT" || {
		error "could not bind '$RWMOUNT'";
		return 1; }
	message "mount -oremount,rw '$RWMOUNT'"
	mount -oremount,rw "$RWMOUNT" || {
		error "could not set rw on '$RWMOUNT'";
		return 1; }
	return 0
}

# process_umount
process_umount()
{
	message "[TODO] umount"
}

# process_main
process_main()
{
	# check stampfile
	if test x"$STAMPFILE" = x; then
		trace "no stampfile file given, sync forced"
	else
		test -e "$STAMPFILE" && OLDSTAMP="`cat $STAMPFILE`" || OLDSTAMP='X'
		NEWSTAMP="`date '+%Y-%m-%d'`"
		trace "stamps (old/new) : $OLDSTAMP/$NEWSTAMP"
		if test x"$OLDSTAMP" = x"$NEWSTAMP"; then
			trace "sync up to date, bye"
			exit 0
		else
			trace "stamp mismatch, sync will be run"
		fi
	fi
	# check files
	L="$CHECK_FILES"
	while test x"$L" != x; do
		F="`echo $L | cut -d: -f1`"
		L="`echo $L | cut -sd: -f2-`"
		test x"$F" != x || continue
		test -e "$F" \
			&& trace "checkfile found: \`$F'" \
			|| die "checkfile not found: \`$F'"
	done
	# ok, create the dest
	test -d "$DEST" || mkdir -vp "$DEST"
	#
	RSYNC="`which rsync`" && test -x "$RSYNC" || die "rsync not found ($RSYNC)"
	CMD="$RSYNC -a --delete --delete-excluded --numeric-ids --no-specials --one-file-system"
	L="$EXCLUDE_FILES"
	while test x"$L" != x; do
		F="`echo $L | cut -d: -f1`"
		L="`echo $L | cut -sd: -f2-`"
		test x"$F" = x || CMD="${CMD} --exclude-from=\"$F\""
	done
	CMD="${CMD} \"$SOURCE/\" \"$DEST\""
	# run
	N=1
	while true; do
		R=0
		trace "[$N/$NTRIES] `pwd`> $CMD"
		eval "$CMD" || R=$?
		case $R in
			0) trace "rsync: success"; break;;
			*) error "rsync: failed ($R)";;
		esac
		if test $N -ge $NTRIES; then
			die "rsync failed $N times, giving up"
		fi
		N=$((N+1))
	done
	# update stampfile
	trace "updating stampfile: \`$STAMPFILE'"
	test x"$STAMPFILE" = x || {
		echo "$NEWSTAMP" >"$STAMPFILE.tmp" \
			&& mv -f "$STAMPFILE.tmp" "$STAMPFILE"; }
}

# defaults
EXCLUDE_FILES=
CHECK_FILES=
NTRIES=3
STAMPFILE=
ROMOUNT=
RWMOUNT=
# parse command line
GTO='getopt -s sh -n mirror -o "n:x:c:s:r:w:h" -- "${@}"' \
	|| die "getopt failed"
eval set -- "`eval $GTO`"
while true; do
	case "$1" in
		-h) usage; exit 0;;
		-n) NTRIES="$2"; shift 2;;
		-x) EXCLUDE_FILES="${EXCLUDE_FILES}:${2}"; shift 2;;
		-c) CHECK_FILES="${CHECK_FILES}:${2}"; shift 2;;
		-s) STAMPFILE="$2"; shift 2;;
		-r) ROMOUNT="$2"; shift 2;;
		-w) RWMOUNT="$2"; shift 2;;
		--) shift; break;;
		*) die "oups: arg $1"
	esac
done
# arguments
test $# -eq 2 || die "wrong args number: $@"
SOURCE="$1"
DEST="$2"
# mount ro/rw devices
process_mount || die "mount(s) failed"
# do the job
RMAIN=0
( process_main; ) || RMAIN=$?
sync
# umount rw
process_umount || true
# report
test $RMAIN -eq 0 \
	&& trace "all done!" \
	|| error "failed!"
exit $RMAIN
