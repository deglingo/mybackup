#!@SHELL@
# -*- shell-script -*-

set -eu

ST_LOG_DOMAIN='mybackup-systest'

. ./mybackup-systest-common


# system conf
#
PACKAGE='@PACKAGE@'
TOP_SRCDIR="`readlink -e '@abs_top_srcdir@'`"
TOP_BUILDDIR="`readlink -e '@abs_top_builddir@'`"
BUILDDIR="$TOP_BUILDDIR/systest"

MB_SYSTEST_MODULES='@MB_SYSTEST_MODULES@'
MB_SYSTEST_MODBASES="`echo $MB_SYSTEST_MODULES | sed -e 's,\(^\|[ \t]\)test_,\1,g'`"
MB_SYSTEST_USER='mbst'


# some defaults
#
# note: ST_ROOTDIR is a symlink
# note: be carefull with BUILDDIR and ST_BUILDDIR!
#
: ${ST_DEBUG_MODULES:-}
: ${ST_VERBOSE:=2}
: ${ST_BASEDIR:=${BUILDDIR}/st-base}
: ${ST_ROOTDIR:=/tmp/st-root}
: ${ST_BUILDDIR:=${BUILDDIR}/st-build}

# create a tmpdir
TMPDIR=`mktemp -d /tmp/mybackup-systest.XXXXXX`
trap "rm -rf $TMPDIR" EXIT


# usage:
#
usage()
{
	cat <<EOF
USAGE: mybackup-systest [OPTIONS] [MODULE...]

OPTIONS:

  -d         always dump tests output
  -F         force rebuild fs directories
  -v         be more verbose
  -q         be less verbose
  -g         enable debug messages (modules)
  -G         enable debug messages (driver)
  -h         print this message and exit
  -h MODULE  get MODULE's help

MODULES:

`_modlist`

ENVIRONMENT:

  ST_MODULES=[MODULE...]  list of modules to run (overriden by
                          command line)

EOF
}

# _modinfo MODULE
_modinfo()
{
	local e="/^[ \t]*#[ \t]*-*-/d;
             /^[ \t]*$/d;
             s,^[ \t]*#[^\-]*\-[ \t]*,,g;"
	sed -e "$e" "$BUILDDIR/test_$1" | head -n1
}

_modlist()
{
	local m
	for m in $MB_SYSTEST_MODBASES; do
		local i="`_modinfo $m`"
		printf " - %-10s : %s\n" "$m" "$i"
	done
}


# usage_mod MODULE
#
usage_mod()
{
	local mod="$1"
	echo "MODULE '$mod'"
	echo
	( . ./"test_$1"; test_$1_help; )
}


# fix_rootdir DEST
#
fix_rootdir()
{
	local dest="`readlink -e $1`" \
		|| test -d "$dest" \
		|| die "fix_rootdir: bad dir: '$1'"
	trace "set ST_ROOTDIR: '$dest'"
	rm -f "$ST_ROOTDIR" "$BUILDDIR"/st-root
	ln -sf "$dest" "$BUILDDIR"/st-root
	test -e "$ST_ROOTDIR" || ln -sf "$dest" "$ST_ROOTDIR"
}


# main:
#
main()
{
	# parse the command line
	DUMP_OUTPUT=0
	: ${ST_REBUILD_FS:=0}
	local help=0
	local shortopts='dFvqgGh'
	local opts="`getopt -n mybackup-systest -o $shortopts -- ${@}`" || die
	eval set -- "$opts"
	while true; do
		case "$1" in
			-h) help=1; shift;;
			-d) DUMP_OUTPUT=1; shift;;
			-F) ST_REBUILD_FS=1; shift;;
			-v) ST_VERBOSE=$((ST_VERBOSE+1)); shift;;
			-q) ST_VERBOSE=$((ST_VERBOSE-1)); shift;;
			-g) ST_DEBUG_MODULES=1; shift;;
			-G) ST_DEBUG=1; shift;;
			--) shift; break;;
			*) die "opt: '$1'";;
		esac
	done
	# help
	if [ $help -ne 0 ]; then
		if [ $# -eq 0 ]; then
			usage
		else
			usage_mod "$1"
		fi
		exit 0
	fi		
	# select modules
	if [ $# -eq 0 ]; then
		: ${ST_MODULES:=${MB_SYSTEST_MODBASES}}
	else
		ST_MODULES="$@"
	fi
	ST_NMODULES=`len $ST_MODULES`
	# go
	run_suite
}


# run_suite
#
run_suite()
{
	trace "setup..."
	setup || die
	info "running $ST_NMODULES modules..."
	local errlist= r=0
	echo -n '['
	for mod in $ST_MODULES; do
		if run_module "$mod"; then
			echo -n "."
		else
			echo -n "E"
			errlist="$errlist $mod"
			r=1
		fi
	done
	echo ']'
	# report
	report "$ST_MODULES" "$errlist"
	# ok
	return $r
}


# setup
#
setup()
{
	local oldpwd=`pwd`
	logfile="$BUILDDIR"/setup.log
	date >"$logfile"
	_setup >>"$logfile" 2>&1 || {
		error "setup failed";
		cat "$logfile" >&2;
		return 1; }
	cd "$oldpwd"
}


# _setup
#
_setup()
{
	# reset base dir
	rm -rf "$ST_BASEDIR"
	mkdir "$ST_BASEDIR"
	fix_rootdir "$ST_BASEDIR"
	# create a build dir
	test -d "$ST_BUILDDIR" || mkdir "$ST_BUILDDIR"
	# update the configuration
	if [ "$ST_BUILDDIR"/Makefile -nt "$BUILDDIR"/mybackup-systest.conf ]; then
		trace "configuration up to date"
	else
		trace "updating configuration"
		_setup_conf || return 1
	fi
	# build
	_setup_build || return 1
	# create /tmp
	mkdir "$ST_ROOTDIR"/tmp
	# ok
	cd "$ST_ROOTDIR"
	find -print0 | sort -z | xargs -0 ls -lhd >"$BUILDDIR"/setup.FILES
	cd "$oldpwd"
}


# _setup_conf:
#
_setup_conf()
{
	# build the command line from user config
	local cmd="\"$TOP_SRCDIR\"/configure"
	local line
	exec <"$BUILDDIR"/mybackup-systest.conf
	while read line; do
		echo "$line" | grep -v "^[ \t]*\(#\|$\)" >/dev/null \
			|| continue
		line="`eval echo $line`"
		cmd="$cmd $line"
	done
	# run
	cd "$ST_BUILDDIR"
	trace "`pwd`> $cmd"
	eval "$cmd" || {
		error "configure failed";
		return 1; }
}


# _setup_build:
#
_setup_build()
{
	cd "$ST_BUILDDIR"
	fill -w70 -f'#' >>"$logfile"
	make listvars || return 1
	fill -w70 -f'#' >>"$logfile"
	make || return 1
	fill -w70 -f'#' >>"$logfile"
	make install || return 1
	fill -w70 -f'#' >>"$logfile"
}


# report
#
report()
{
	local runmods="$1" errmods="$2"
	local nmods=`len $runmods` nerrs=`len $errmods`
	local status
	if [ $nerrs -eq 0 ]; then
		status="PASS ($nmods MODULES(S) OK)"
	else
		status="FAILED! ($nerrs/$nmods MODULES(S) FAILED)"
	fi
	# report
	local sep1="`fill -cw70 -f '#'`"
	local sep2="`fill -cw70 -f '-'`"
	echo "$sep1"
	echo "TEST: $status"
	for mod in $runmods; do
		local mfailed mstatus
		isin "$mod" $errmods \
			&& { mstatus='FAILURE'; mfailed=1; } \
			|| { mstatus='SUCCESS'; mfailed=0; }
		test $DUMP_OUTPUT -ne 0 -o $mfailed -ne 0 \
			|| continue
		echo "$sep1"
		echo "$mstatus: `strup $mod`"
		echo "$sep2"
		cat "test_$mod.log"
	done
	echo "$sep1"
}


# run_module MODULE
#
run_module()
{
	local mod="$1"
	local logfile="test_$mod.log" r=0
	local rundir="$BUILDDIR/st-root.$mod"
	# create some temp dir
	# note: this one is kept between runs!
	local tmpdir="$BUILDDIR/tmp/test_$mod"
	test -d "$tmpdir" || mkdir -p "$tmpdir"
	# sync the rootdir
	st_sync "$ST_BASEDIR" "$rundir"
	fix_rootdir "$rundir"
	{ _run_commands "$mod" "`strup $mod`" || die "_run_command failed"; } \
		| env -i @SHELL@ -s \
		>"$logfile" 2>&1 || r=$?
	return $r
}


# _run_commands
#
_run_commands()
{
	cat <<EOF
set -eu

export ST_DEBUG="${ST_DEBUG_MODULES:-}"
export ST_ROOTDIR="$ST_ROOTDIR"
export ST_LOG_DOMAIN="test_$1"
export ST_TEST_NAME="TEST_$2"
export ST_TEST_FILE="$BUILDDIR/test_$1"
export ST_TMPDIR="$BUILDDIR/tmp/test_$1"
export ST_MBDUMP_OPTS="${ST_MBDUMP_OPTS:-}"
export ST_MBCLEAN_OPTS="${ST_MBCLEAN_OPTS:-}"
export ST_REBUILD_FS="${ST_REBUILD_FS}"

# [fixme]
export ST_MAILTO="${ST_MAILTO:-}"
export GNUTAR="@GNUTAR@"

#export HOME="\$ST_HOME\"

cd "\$ST_ROOTDIR"
. "$BUILDDIR"/mybackup-systest-common \
  || die "could not load common tools"

#trace "loading tools"
cd "\$ST_ROOTDIR"
. "$BUILDDIR"/mybackup-systest-tools \
  || die "could not load tools"

trace "LOAD"
cd "\$ST_ROOTDIR"
. "\$ST_TEST_FILE" \
  || die "could not load module"

trace "SETUP"
cd "\$ST_ROOTDIR"
eval "test_$1_setup" \
  || die "setup failed"

trace "RUN"
cd "\$ST_ROOTDIR"
eval "test_$1_main" \
  || die "run failed"

trace "QUIT"
EOF
}


# exec
main "${@}"
