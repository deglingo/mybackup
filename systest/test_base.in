# -*- shell-script -*-
# test_base - sanity checks and basic stuff


# test_base_help:
#
test_base_help()
{
	cat <<EOF
Performs some sanity checks on the install and report system details.
EOF
}


# test_base_setup:
#
test_base_setup()
{
	local oldpwd="`pwd`"
	# dump environment and files list (do this in setup so the output
	# is not polluted by files installed from here)
	env | sort -k1 -t= >"$ST_ROOTDIR/TEST_BASE.ENV.txt"
	cd "$ST_ROOTDIR"
	find -print0 | sort -z | xargs -0 ls -lhd >"$ST_ROOTDIR/TEST_BASE.FILES.txt"
	cd "$oldpwd"

	# setup some config (just enough to pass mbcheck)
	st_mkfile "/etc/mybackup/$ST_TEST_NAME/mybackup.conf" - <<EOF
{
}
EOF
}


# _mbpy
_mbpy()
{
	"@PYTHON@" -c "import $1; print($1.__file__)"
}


# checkexe
#
checkexe()
{
	local n="$1"
	local w="`which $n`" || die "which '$n' failed ($?)"
	test x"$w" != x || die "exe '$n' not found"
	test -x "$w" || die "$n is not executable ($w)"
	info "exe $n ok: $w (`readlink -e $w`)"
}


# checkmod
#
checkmod()
{
	local m="$1"
	local f="`_mbpy $m`" || die "could not load module: '$m'"
	info "mod $m ok: $f (`readlink -e $f`)"
}


# test_base_main:
#
test_base_main()
{
	# check paths
	checkexe "mbdump"
	checkexe "mbclean"
	checkexe "mbcheck"
	checkexe "mbui"
	checkmod "mybackup"
	# let's try an mbcheck
	st_exec mbcheck $ST_TEST_NAME
}
