# -*- shell-script -*-


DAY0='1979/12/31 00:00:00'


_setup_day_1()
{
	st_mkfile -r . -d "$1" "/DISK_1/FILE" -Rs1
}


# test_crash_setup:
#
test_crash_setup()
{
	# setup_fs
	test "$ST_RUNDIR/fs.stamp-h" -nt "$ST_ARG0" || {
		rm -rf "$ST_RUNDIR/fs";
		mkdir "$ST_RUNDIR/fs";
		st_setup_fs "$DAY0" "$ST_RUNDIR/fs" 1 _setup_day_;
		date >"$ST_RUNDIR/fs.stamp-h"; }

	st_mkfile "/etc/mybackup/CRASH/mybackup.conf" - <<EOF
{
  "mailto": "${MYBACKUP_SYSTEST_MAILTO:-}",
  "scripts": {
    "KILLER": {
      "prog": "./killer",
      "options": ["%(trigger)s"]
    }
  },
  "disks": {
    "DISK_1": {
      "path": "$ST_ROOTDIR/fs/DISK_1",
      "hooks": [{
        "script": "KILLER",
        "triggers": ".*",
        "options": []
      }]
    }
  }
}
EOF

	st_mkfile -m755 "/etc/mybackup/CRASH/killer" - <<EOF
#!/bin/sh
trace() { echo "KILLER: \$*"; }
LOGFILE="$ST_ROOTDIR/tmp/killer.log"
exec >>"\$LOGFILE" 2>&1
#set -x
trace "======================================================================"
trace "TRIGGER='\${1}' TARGET='\$MB_TEST_CRASH_TRIGGER'"
test x"\$1" = x"\$MB_TEST_CRASH_TRIGGER" \
  || { trace "WRONG TRIGGER, BYE"; exit 0; }
KPID=\`ps -p\$\$ -oppid --no-headers\`
pstree -alps \$KPID
trace "KILLING PID \$KPID"
kill -KILL \$KPID || {
  trace "KILL FAILED! (\$?)";
  exit 1; }
sleep 5 # let it die
trace "** HEY, WHAT AM I DOING HERE? **"
exit 1
EOF
}


getpid()
{
	# [fixme] how to that in bash ?
    # ( echo $$; ) still returns the parent's pid !?
	python -c 'import os; print os.getppid();'
}


# test_crash_main:
#
test_crash_main()
{
	local day=1 hour date
	st_sync "$ST_RUNDIR/fs/day1" "$ST_ROOTDIR/fs"
	# this one should work
	hour=1; date="`st_fakedate -d$day -h$hour`"
	trace "** RUN $hour : $date **"
	_MB_SYSTEST_DATE="$date" \
		st_mbdump CRASH -q || die
	# this must fail
	hour=2; date="`st_fakedate -d$day -h$hour`"
	trace "** RUN $hour : $date **"
	_MB_SYSTEST_DATE="$date" \
		MB_TEST_CRASH_TRIGGER='schedule' \
		st_mbdump '!' -f CRASH -q || die
	# make sure it won't run again (because the journal is still
	# present)
	hour=3; date="`st_fakedate -d$day -h$hour`"
	trace "** RUN $hour : $date **"
	_MB_SYSTEST_DATE="$date" \
		st_mbdump '!' -f CRASH -q || die
	# mbclean should clean up the mess
	st_mbclean CRASH || die
	# so a new run will succeed
	# hour=4; date="`st_fakedate -d$day -h$hour`"
	# trace "** RUN $hour : $date **"
	# _MB_SYSTEST_DATE="$date" \
	# 	st_mbdump -f CRASH -q || die
	# all done
	trace "OK"
}
